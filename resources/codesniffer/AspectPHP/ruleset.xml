<?xml version="1.0" encoding="UTF-8"?>
<ruleset name="AspectPHP">
	<description>The AspectPHP coding standard.</description>

	<rule ref="Generic.Classes.DuplicateClassName" />

    <!-- Avoid empty statements like "if ($a === $b) {}". -->
	<rule ref="Generic.CodeAnalysis.EmptyStatement" />
	<!-- Avoid complex for loops, for example "for (;true;) true;". -->
	<rule ref="Generic.CodeAnalysis.ForLoopShouldBeWhileLoop" />
	<!-- Avoid function calls in for loops for performance reasons. -->
	<rule ref="Generic.CodeAnalysis.ForLoopWithTestFunctionCall" />
	<!-- Avoid constant condition in if statements like "if (true) {/*...*/}". -->
	<rule ref="Generic.CodeAnalysis.UnconditionalIfStatement" />
	<!-- Avoid final methods in final classes. -->
	<rule ref="Generic.CodeAnalysis.UnnecessaryFinalModifier" />
	<!-- Avoid overridden methods that delegate to its parent. -->
	<rule ref="Generic.CodeAnalysis.UselessOverridingMethod" />

    <!-- Generate a warning if TODOs are encountered. -->
	<rule ref="Generic.Commenting.Todo" />

    <!-- Avoid inline control structures like "if ($a === $b) return true;". -->
	<rule ref="Generic.ControlStructures.InlineControlStructure" />

    <!-- Avoid lines that are too long. -->
	<rule ref="Generic.Files.LineLength">
		<properties>
			<property name="lineLimit" value="120" />
			<property name="absoluteLineLimit" value="150" />
		</properties>
	</rule>

    <!-- Only one statement is permitted per line. -->
	<rule ref="Generic.Formatting.DisallowMultipleStatements" />
	<!-- Align assignments. -->
	<rule ref="Generic.Formatting.MultipleStatementAlignment">
		<properties>
			<property name="maxPadding" value="5" />
			<property name="ignoreMultiLine" value="true" />
		</properties>
	</rule>
	<!-- Avoid spaces after casting, for example "(int) $number". -->
	<rule ref="Generic.Formatting.NoSpaceAfterCast" />

    <!-- Do not pass variables by reference. -->
	<rule ref="Generic.Functions.CallTimePassByReference" />
	<!-- Braces that opens a method body is expected in the line after the signature. -->
	<rule ref="Generic.Functions.OpeningFunctionBraceBsdAllmanSniff" />

    <!-- Warn if the nesting level is too high. -->
	<rule ref="Generic.Metrics.NestingLevel" />
	<!-- Avoid complex methods. -->
	<rule ref="Generic.Metrics.CyclomaticComplexity" />

    <!-- Only "__construct" is allowed as constructor name. -->
	<rule ref="Generic.NamingConventions.ConstructorName" />
	<!-- Ensures that constant names are uppercase. -->
	<rule ref="Generic.NamingConventions.UpperCaseConstantName" />

    <!-- Do not use alias function, for example "sizeof". -->
	<rule ref="Generic.PHP.ForbiddenFunctions" />
	<!-- Ensure that constants like true, false or null are lowercase. -->
	<rule ref="Generic.PHP.LowerCaseConstant" />
	<!-- AspectPHP does not use views, therefore short open tags are not allowed. -->
    <rule ref="Generic.PHP.DisallowShortOpenTagSniff" />

    <!-- Enforce indention per spaces. -->
	<rule ref="Generic.WhiteSpace.DisallowTabIndent" />
	<!-- Check for correct indention of structures. -->
	<rule ref="Generic.WhiteSpace.ScopeIndent" />

    <!-- Avoid spaces around array brackets, for example "$a [1] = 'x';". -->
	<rule ref="Squiz.Arrays.ArrayBracketSpacing" />

    <!-- Ensures that logical operators like "and" or "or" are not used. Use "&&" or "||" instead. -->
	<rule ref="Squiz.Operators.ValidLogicalOperators" />

    <!-- Do not use the "global" keyword. -->
	<rule ref="Squiz.PHP.GlobalKeyword" />
	<!-- Do not use Heredoc strings (started by <<<IDENTIFIER).  -->
	<rule ref="Squiz.PHP.Heredoc" />
	<!-- Avoid code that is not executable, for example after a return statement. -->
	<rule ref="Squiz.PHP.NonExecutableCode" />

    <!-- Enforce documentation of exceptions. -->
	<rule ref="Squiz.Commenting.FunctionCommentThrowTag" />
	<!-- Check for valid method comments. -->
	<rule ref="PEAR.Commenting.FunctionComment" />
	<rule ref="PEAR.Commenting.FunctionComment.MissingReturn">
		<!-- "return void" is not mandatory. -->
		<severity>0</severity>
	</rule>
	<rule ref="PEAR.Commenting.FunctionComment.MissingParamComment">
		<!-- An own comment for each parameter is not mandatory. -->
		<severity>0</severity>
	</rule>
	<rule ref="PEAR.Commenting.FunctionComment.SpacingAfterParams">
		<!-- Blank line after parameters is not required. -->
		<severity>0</severity>
	</rule>
	<rule ref="PEAR.Commenting.FunctionComment.ParameterNamesNotAligned">
		<!-- Aligning parameters is not required. -->
		<severity>0</severity>
	</rule>
	<rule ref="PEAR.Commenting.FunctionComment.ParameterCommentsNotAligned">
		<!-- Aligning parameter comments is not required. -->
		<severity>0</severity>
	</rule>
	<!-- Check for variable comments. -->
	<rule ref="Squiz.Commenting.VariableComment" />
	<rule ref="Squiz.Commenting.VariableComment.IncorrectVarType">
		<!-- Squiz variable style is not required. -->
		<severity>0</severity>
	</rule>
	<rule ref="Squiz.Commenting.VariableComment.ShortSingleLine">
		<!-- Short description may span multiple lines. -->
		<severity>0</severity>
	</rule>

    <!-- Ensure that PHP files do not contain closing tags ("?>"). -->
    <rule ref="Zend.Files.ClosingTag" />

</ruleset>
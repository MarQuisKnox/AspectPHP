<?xml version="1.0" encoding="UTF-8"?>
<ruleset name="AspectPHP">
	<description>The AspectPHP coding standard.</description>

	<rule ref="Generic.Classes.DuplicateClassName" />

    <!-- Avoid empty statements like "if ($a === $b) {}". -->
	<rule ref="Generic.CodeAnalysis.EmptyStatement" />
	<!-- Avoid complex for loops, for example "for (;true;) true;". -->
	<rule ref="Generic.CodeAnalysis.ForLoopShouldBeWhileLoop" />
	<!-- Avoid function calls in for loops for performance reasons. -->
	<rule ref="Generic.CodeAnalysis.ForLoopWithTestFunctionCall" />
	<!-- Avoid constant condition in if statements like "if (true) {/*...*/}". -->
	<rule ref="Generic.CodeAnalysis.UnconditionalIfStatement" />
	<!-- Avoid final methods in final classes. -->
	<rule ref="Generic.CodeAnalysis.UnnecessaryFinalModifier" />
	<!-- Avoid overridden methods that delegate to its parent. -->
	<rule ref="Generic.CodeAnalysis.UselessOverridingMethod" />

    <!-- Generate a warning if TODOs are encountered. -->
	<rule ref="Generic.Commenting.Todo" />

    <!-- Avoid inline control structures like "if ($a === $b) return true;". -->
	<rule ref="Generic.ControlStructures.InlineControlStructure" />

    <!-- Avoid lines that are too long. -->
	<rule ref="Generic.Files.LineLength">
		<properties>
			<property name="lineLimit" value="120" />
			<property name="absoluteLineLimit" value="150" />
		</properties>
	</rule>

    <!-- Only one statement is permitted per line. -->
	<rule ref="Generic.Formatting.DisallowMultipleStatements" />
	<!-- Align assignments. -->
	<rule ref="Generic.Formatting.MultipleStatementAlignment">
		<properties>
			<property name="maxPadding" value="5" />
			<property name="ignoreMultiLine" value="true" />
		</properties>
	</rule>
	<!-- Avoid spaces after casting, for example "(int) $number". -->
	<rule ref="Generic.Formatting.NoSpaceAfterCast" />

    <!-- Do not pass variables by reference. -->
	<rule ref="Generic.Functions.CallTimePassByReference" />
	<rule ref="Generic.Functions.OpeningFunctionBraceKernighanRitchie" />

	<rule ref="Generic.Metrics.NestingLevel" />
	<rule ref="Generic.Metrics.CyclomaticComplexity" />

	<rule ref="Generic.NamingConventions.ConstructorName" />
	<rule ref="Generic.NamingConventions.UpperCaseConstantName" />

	<rule ref="Generic.PHP.ForbiddenFunctions" />
	<rule ref="Generic.PHP.LowerCaseConstant" />

	<rule ref="Generic.WhiteSpace.DisallowTabIndent" />
	<rule ref="Generic.WhiteSpace.ScopeIndent" />

	<rule ref="Squiz.Arrays.ArrayBracketSpacing" />

	<rule ref="Squiz.Operators.ValidLogicalOperators" />

	<rule ref="Squiz.PHP.Eval" />
	<rule ref="Squiz.PHP.GlobalKeyword" />
	<rule ref="Squiz.PHP.Heredoc" />
	<rule ref="Squiz.PHP.NonExecutableCode" />

	<rule ref="Squiz.Commenting.FunctionCommentThrowTag" />
	<rule ref="PEAR.Commenting.FunctionComment" />
	<rule ref="PEAR.Commenting.FunctionComment.MissingReturn">
		<!-- "return void" is not mandatory. -->
		<severity>0</severity>
	</rule>
	<rule ref="PEAR.Commenting.FunctionComment.MissingParamComment">
		<!-- An own comment for each parameter is not mandatory. -->
		<severity>0</severity>
	</rule>
	<rule ref="PEAR.Commenting.FunctionComment.SpacingAfterParams">
		<!-- Blank line after parameters is not required. -->
		<severity>0</severity>
	</rule>
	<rule ref="PEAR.Commenting.FunctionComment.ParameterNamesNotAligned">
		<!-- Aligning parameters is not required. -->
		<severity>0</severity>
	</rule>
	<rule ref="PEAR.Commenting.FunctionComment.ParameterCommentsNotAligned">
		<!-- Aligning parameter comments is not required. -->
		<severity>0</severity>
	</rule>
	<rule ref="Squiz.Commenting.VariableComment" />
	<rule ref="Squiz.Commenting.VariableComment.IncorrectVarType">
		<!-- Squiz variable style is not required. -->
		<severity>0</severity>
	</rule>
	<rule ref="Squiz.Commenting.VariableComment.ShortSingleLine">
		<!-- Short description may span multiple lines. -->
		<severity>0</severity>
	</rule>

    <rule ref="Zend.Files.ClosingTag" />

</ruleset>